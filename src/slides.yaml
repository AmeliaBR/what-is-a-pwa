# Content of the slide deck, as a series of YAML documents
# Each slide can have the following properties
# name     - title for the slide page
#          - used to generate the folder name for the URL
# text     - HTML markup for the main content block in the template
#            (quoted string recommended, to avoid punctuation confusion)
# template - name of the slide markup template, if not default
# css      - custom styles for just this slide (as content of <style>)
#            must be quoted string, to avoid : being interpretted as YAML
# class    - CSS classes to add to the slide element
# ...other values according to the template
---
name: Title page
template: title-card
title-level: 1
text: "What the
  <span role='img' aria-label='H-E-double-hockey-sticks'
  >HE<span class='hockey-sticks'>üèíüèí</span></span><br/>
  is a<br/> PWA?"
css: |-
  .hockey-sticks {
      display: inline-block;
      letter-spacing: -0.7em;
      margin: 0 0.5em;
      transform: scaleX(-1);
  }
---
name: Talk details
text:
  - What (the Heck) is a PWA?
  - talk by Amelia Bellamy-Royds</br> (<a href="https://twitter.com/AmeliasBrain">@AmeliasBrain</a>)
  - 5 April 2018, Exchange.js,<br/> Edmonton
  - "<a href='https://ameliabr.github.io/what-is-a-pwa/'>View on GitHub pages</a>"
---
name: P.W.A.
text: "<b>P</b>rogressive
  <b>W</b>eb
  <b>A</b>pplication"
---
name: It's a website
text: "<strong>A website</strong>
  that has been <em>progressively enhanced</em>
  so it acts like an <strong>app</strong>"
---
name: Zingy new brandname
template: quote
text: "PWAs are just a bunch of technologies with a zingy-new brandname
  that keeps the open web going a bit longer"
citation: 
  source: "Frances Berriman"
  link: 'https://fberriman.com/2017/06/26/naming-progressive-web-apps/'
---
name: The name isn't for you
template: quote
text: "<em>The name isn‚Äôt for you</em>‚Ä¶
  The name is for your boss, for your investor, for your marketeer."
citation: 
  source: "Frances Berriman"
  link: 'https://fberriman.com/2017/06/26/naming-progressive-web-apps/'
---
name: But really‚Ä¶
template: title-card
title-level: 2
text: "But really‚Ä¶
  <strong>What is a PWA?</strong>"
---
name: Website plus
template: title-card
title-level: 3
text: "A progressive website
  <div><b>+</b></div> installation metadata
  <div><b>+</b></div> offline support"
css: |-
  h3 b { text-decoration: lightYellow underline; }
---
name: Basic or better
template: definition
term: "progressive (enhancement)"
text: 
  - "Basic functionality in basic browsers."
  - "Better functionality in better browsers."
---
name: Progressive means responsive
text: "<strong>progressive</strong> also means <strong>responsive</strong>"
---
name: It's still a website
template: definition
term: "website"
text: "<em>discoverable</em>, <em>linkable</em>, <strong>OS-independent</strong>"
---
name: HTTPS required
text: "Also <em>secure</em>:<br/> HTTPS is <strong>required</strong>"
---
name: Installation metadata
template: definition
term: "installation metadata"
text: "A web <em>manifest</em> (JSON file) defines the <em>app-y</em> bits"
---
name: Offline support
template: definition
term: "offline support"
text: "A <em>service worker</em> (JavaScript) provides offline support."
---
name: The manifest
template: title-card
level: 3
text: "The Web Manifest"
---
name: Manifest link
template: code-snippet
text: "Linked from every page"
code: 
  - lang: HTML
    code: '<link rel="manifest" href="/en.webmanifest" />'
  - lang: HTML
    code: '<link rel="manifest" href="/manifest-en.json" />'
---
name: Manifest requirements
template: list
text: "Manifest <em>should</em> have:"
list:
  - "<code>start_url</code>"
  - "<code>name</code> and <code>short_name</code> (max 12 char)"
  - "<code>display</code>"
  - "icons (at least one)"
---
---
name: Manifest options
template: list
text: "Other options:"
list:
  - "<code>scope</code>"
  - "<code>dir</code> and <code>lang</code>"
  - "more icons and theme colors"
  - "screenshots, categories, and ratings for app stores"
  - "<code>orientation</code>"
  - "alternative apps and <code>prefer_related_applications</code> (boo)"
  - "<code>serviceworker</code> (eventually, maybe)"
---
name: installation support
template: list
text: "Installable in"
list: 
  - "Android browsers (Chrome, Firefox, etc.)"
  - "Safari 11.1 (brand new)"
  - "MS Edge 17 / Windows Store (in preview)"
  - "Soon: Other browsers on Windows, Mac & iOS"
---
name: The service worker
template: title-card
level: 3
text: "Service Workers"
---
name: Web workers
template: definition
term: "worker (script)"
text: 
  - "script that runs in its own global <em>scope</em>,
     separate from the document window"
  - "may run on a separate <strong>thread</strong>"
---
name: Proxy as a service
text: "The <em>service</em> worker acts as a <strong>proxy server</strong> for website file fetches"
---
name: Custom cache
text: "A service worker controls a <strong>cache</strong> of HTTP requests &amp; responses
       for its entire <strong>scope</strong>"
---
name: Service worker registration
template: code-snippet
text: "Registered with JS on any (every) page:"
code: 
      lang: JS
      code: |-
        if (navigator.serviceWorker) {
          navigator.serviceWorker.register("/sw.js")
        }
---
name: Service Worker Benefits
template: title-card
title-level: 3
text: Why use service workers?
---
name: Simple offline support
text: "<strong>Minimum Viable Service Worker:</strong> custom offline error pages"
---
name: Possible service workers
template: list
text: "<strong>Maximal</strong> Service Workers:"
list: 
  - "standalone games/apps"
  - "save for offline"
  - "asset manipulation"
  - "generated HTML"
  - "multi-tab communication"
---
name: Service Worker Complications
template: title-card
title-level: 3
text: Problems with service workers
---
name: Cache invalidation
template: definition
term: cache invalidation
text:
  - knowing when to trash your cache
  - considered one of the <strong>hard problems</strong> of computer science
---
name: How do you know?
text:
  - If you're using cached versions of files‚Ä¶
  - ‚Ä¶how do you know when a file has been <em>updated</em> on the server?
---
name: Updating the service worker
text:
  - The <em>browser</em> will regularly check to see if the <strong>worker script</strong>
    needs an update.
  - If the script has changed at all, the new script will be <strong>installed</strong>
    and can modify the cache.
---
name: Version your worker
template: list
text: "In other words:"
list:
  - "update your worker whenever you update your site"
  - "include a version number <code>const</code> in the worker file"
  - "include code for detecting & discarding stale cache items"
css: |-
  .slide ul { column-width: auto; }
---
name: Only one
text: "<strong>But‚Ä¶</strong> There can be only <strong>one</strong>"
---
name: Storage conflicts
template: quote
text:
  - If you're dealing with storage you can easily end up with 2 tabs
    having very different opinions on how their shared storage should be managed.
  - This can result in errors, or worse, data loss.
citation:
  source: Jake Archibald
  link: 'https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle'
---
name: It causes them great sadness
template: quote
text:
  - Users actively dislike data loss.
  - It causes them great sadness.
citation:
  source: Jake Archibald
  link: 'https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle'
css: |-
  blockquote p:last-of-type {
    text-align: right;
  }
---
name: The worker-in-waiting
text:
    By default, the new service worker <strong>waits</strong>
    until <em>all</em> tabs using the old worker have <strong>closed</strong>.
---
name: Skip waiting and start fetching now!
template: code-snippet
text:
    A waiting service worker can skip waiting
    and force early <strong>activation</strong>
code:
    lang: JS
    code: |-
      self.addEventListener('install', (e)=> {
        /* ...do stuff to get ready... */

        self.skipWaiting();
      });
---
name: Claim your clients!
template: code-snippet
text:
  - But‚Ä¶ that only affects <em>new</em> tabs (or refreshes).
  - You need to <em>claim</em> existing tabs separately.
code:
    lang: JS
    code: |-
      self.addEventListener('install', (e)=> {
        /* ...do stuff to get ready... */

        self.skipWaiting(); // <= get new tabs
        clients.claim(); // <= + existing tabs
      });
---
name: Or‚Ä¶ don't
text:
  - <strong>Or‚Ä¶ don't.</strong>
  - You can wait out the activation period,<br/>
    just setting up the service worker <strong>for next time</strong>.
  - Or, <em>document code</em> can listen for service worker changes
    and update <strong>when it is safe</strong>.
---
# name: The demo
# template: title-card
# level: 2
# text: "A demo"
# ---
# name: This is the demo
# text: "<b>You're looking at it</b>"
# css: |-
#   .slide p {
#     animation: pulse 1s ease-in-out infinite alternate;
#   }
#   @keyframes pulse {
#     to { transform: scale(1.1); }
#   }
# ---
# name: Demo links
# template: list
# text: "Follow along:"
# list:
#   - "<a href='https://github.com/AmeliaBR/what-is-a-pwa/'>GitHub repo: AmeliaBR/what-is-a-pwa</a>"
#   - "<a href='https://ameliabr.github.io/what-is-a-pwa/'>Live on GitHub pages</a>" 
# ---
#
# ---
name: More to explore
template: title-card
title-level: 2
text: "More PWA resources"
---
name: PWA Rocks
text: "The <a href='https://pwa.rocks/'><b>PWA Rocks</b></a> site compiles demos &amp; real-world sites"
object:
  iframe: 'https://pwa.rocks/'
---
name: Documentation
template: list
text: "References &amp; tutorials:"
list:
  - "<a href='https://developer.mozilla.org/en-US/Apps/Progressive'>MDN</a>
     has great new PWA guides (+ regular docs)"
  - "<a href='https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/'>developers.google.com/web</a>
     has tutorials"
  - "The Service Worker Cookbook, <a href='https://serviceworke.rs/'>serviceworke.rs</a>
     has copy & paste samples"
  - "Then, there's the specs:
     <a href='https://w3c.github.io/ServiceWorker/'>Service Worker</a> and
     <a href='https://w3c.github.io/manifest/'>Web Manifest</a>,
     on w3c.github.io"
---
name: Lighthouse analysis tool
text: 
    Google's <a href='https://developers.google.com/web/tools/lighthouse/'><b>Lighthouse</b></a>
    analysis tool<br/> (in Chrome Dev Tools Audits)<br/> includes PWA tests.
---
name: Don't forget Dev Tools
text: 
  - There are other new service worker and PWA Dev Tools features
    <strong>(in all browsers)</strong>
  - Expect more as support improves,
    so you can <strong>start coding!</strong>
---




